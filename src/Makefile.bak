####################################################################
# Compiler variables and flags
#####################################################################

#For Windows
#ARCH=WINDOWS

#For Linux
ARCH=LINUXINTEL64
COMPUTE_CAPABILITY=compute_20
GPU_SM=sm_20

COMPUTE_CAPABILITY=compute_30
GPU_SM=sm_30

GENCODE_ARCH_COMPUTE=-gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30

# DEFAULT_BIG_PATH=BigPrimeFieldFFT_4

ifeq ($(ARCH), LINUXINTEL64)
	CC=gcc
	GXX=g++
	NVCC=nvcc
	
	CFLAGS=-c -O2 -DLINUXINTEL64 -g -I $(CUMODP_HOME)/include -w
	# CFLAGS=-c -DLINUXINTEL64 -g -I $(CUMODP_HOME)/include -w
	# CUFLAGS=-arch=sm_13 --compiler-options '-fPIC'
	# CUFLAGS=-arch=sm_13  --compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment'
	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment'

	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -gencode arch=compute_30,code=sm_30  -Xptxas -dlcm=ca

	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -gencode arch=compute_20,code=sm_20  -Xptxas -dlcm=cg 

	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -gencode arch=compute_30,code=sm_30 --cudart shared 

	#dlcm=cg (disables L1 caching)
	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -Xptxas -dlcm=ca --cudart shared 
	
	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -Xptxas -dlcm=cg --cudart shared --gpu-architecture=$(COMPUTE_CAPABILITY) --gpu-code=$(GPU_SM) -Xptxas -v,-abi=no
	
	CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -Xptxas -dlcm=cg --cudart shared $(GENCODE_ARCH_COMPUTE) -Xptxas -v,-abi=no

	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' --cudart shared --gpu-architecture=$(COMPUTE_CAPABILITY) --gpu-code=$(GPU_SM) -Xptxas -v,-abi=no
	
	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -Xptxas -dlcm=ca --cudart shared --gpu-architecture=$(COMPUTE_CAPABILITY) --gpu-code=$(GPU_SM) -Xptxas -v,-abi=no
	# CUFLAGS=--compiler-options '-fPIC -Wall -Wno-unused-but-set-variable -Wno-comment' -Xptxas -dlcm=ca 

	LIBFLAGS= -shared -o 

	# LDFLAGS=-lm -L/usr/local/cuda/lib64
	# LDFLAGS=-lm -L/usr/local/cuda/lib64 -lcudart
	# LDFLAGS=-lm -L$CUDA_LIB_PATH -lcudart #original
	LDFLAGS=-lm -L$CUDA_LIB_PATH -lcudart
	#LDFLAGS=-lm -L/usr/local/cuda-7.0/lib64 -lcudart
	CUMODP=cumodp
endif

ifeq ($(ARCH), WINDOWS)
	CC=cl
	LINK=link
	NVCC=nvcc
	CFLAGS=
	CUFLAGS=
	LIBFLAGS=
	LDFLAGS=
	CUMODP=cumodp
endif

# Flags for the C/C++ compiler
# Useful flags:
# 	-O2   --  level of optimization
# 	-m64  --  needed to get 64-bit longs
# 	-g    --  debugging
#
# Flags for the CUDA compiler
# Useful flags:
#   --ptxas-options -v     

############################
# Sources for the library
# fast_evaluation.cu and subproduct_tree.cu
# are deleted from execution by Sardar Haque on 6th December 
# as it is old code and not required anymore
# Moreover it is producing many warnings
############################

 SOURCES=fft_aux.cu\
	list_stockham.cu\
	list_inv_stockham.cu\
	stockham_mont.cu\
	stockham.cu\
 	ct_fft_mont.cu\
	rdr_poly.cu\
	subres_p.cu\
	subres.cu\
	scube.cu\
	modpn.cu\
	condensationReal.cu\
	condensationFiniteField.cu\
	naive_poly_mul.cu\
	opt_plain_mul.cu\
	fastPolyEvaluation.cu\
	fastPolyInterpolation.cu\
	taylor_shift_kernel.cu\
	taylor_shift_cpu.cu\
	taylor_shift.cu\
	cudaDiv.cu\
	cudaGcd.cu\
	list_pointwise_mul.cu\
	taylor_shift_fft.cu\
	ts_chinese_remainder.cu\
	taylor_comb.cu\
	ts_VCA_count.cu\
	ts_VCA_all.cu\
	new_prefix_mul.cu\
	new_taylor_shift.cu\
	new_pkc.cu\
	new_mixed_radix_rep.cu\
	bigArithmeticKernels_P3.cu\
	bigArithmeticKernels_P4.cu\
	mixed_radix_reverse.cu\
	## new_desBound.cu

# cd BigPrimeFieldFFT_4
# SOURCES=bigArithmeticKernels.cu
 # SOURCES=bigArithmeticKernels.cu
############################
#  Building 
############################

ifeq ($(ARCH), LINUXINTEL64) 

OBJECTS=$(SOURCES:.cu=.o)

all: so

adapt: 
	# /bin/bash $(CUMODP_HOME)/adapter.sh generate 
	# cd $(CUMODP_HOME)/new_tests/$(DEFAULT_BIG_PATH)/scripts && ./makeLinks.sh
	# rm -f bigArithmeticKernels_P3.o
	# rm -f bigArithmeticKernels_P4.o

main: so $(SOURCES) 
	$(NVCC) -DLINUXINTEL64 benchmark.cu -o exe -L. -l$(CUMODP)
	$(CC) -DLINUXINTEL64 main.c -o main -L. -l$(CUMODP)

so: adapt $(OBJECTS)
	$(NVCC) $(LIBFLAGS) lib$(CUMODP).so $(OBJECTS) $(LDFLAGS)

# compile: $(OBJECTS)
# 	$(NVCC) $(LIBFLAGS) lib$(CUMODP).so $(OBJECTS) $(LDFLAGS)

%.o : %.cu
	$(NVCC) $(CFLAGS) $(CUFLAGS) $*.cu

# Anis: when you want to test something you just wrote, just change the "subproduct_tree.cu and subproduct_tree" according to your code
# Then in console you just need to type "make test"
test: so
	$(NVCC) -DLINUXINTEL64 interfaceFastPolyEvaluation.cu -o polyFastEvaluation -L. -l$(CUMODP)

all2: so
	rm -f *.linkinfo

else

echo "To build for Windows platforms"

endif

clean:	
	rm -f *.o *~ *.linkinfo *.out *.ptx *.log *.prof *.obj
	rm -f lib$(CUMODP).*
	rm -f main exe

####################END OF THE FILE##################################
