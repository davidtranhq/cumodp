FFT16:=proc(xx,w,p)
  #input x array  w array  
  #in-place
  local num1,num2,x;
  x:=xx;
  #first round
  num1:=x[1]:
  num2:=x[9]:
  x[1]:=(num1+num2) mod p:
  x[9]:=(num1-num2) mod p:
  num1:=x[5]:
  num2:=x[13]:
  x[5]:=(num1+num2) mod p:
  x[13]:=(num1-num2) mod p:
  num1:=x[3]:
  num2:=x[11]:
  x[3]:=(num1+num2) mod p:
  x[11]:=(num1-num2) mod p:
  num1:=x[7]:
  num2:=x[15]:
  x[7]:=(num1+num2) mod p:
  x[15]:=(num1-num2) mod p:
  num1:=x[2]:
  num2:=x[10]:
  x[2]:=(num1+num2) mod p:
  x[10]:=(num1-num2) mod p:
  num1:=x[6]:
  num2:=x[14]:
  x[6]:=(num1+num2) mod p:
  x[14]:=(num1-num2) mod p:
  num1:=x[4]:
  num2:=x[12]:
  x[4]:=(num1+num2) mod p:
  x[12]:=(num1-num2) mod p:
  num1:=x[8]:
  num2:=x[16]:
  x[8]:=(num1+num2) mod p:
  x[16]:=(num1-num2) mod p:
  
  #second round
  num1:=x[1]:
  num2:=x[5]:
  x[1]:=(num1+num2) mod p:
  x[5]:=(num1-num2) mod p:
  num1:=x[9]:
  num2:=x[13]:
  x[9]:=(num1+w[5]*num2) mod p:
  x[13]:=(num1-w[5]*num2) mod p:
  num1:=x[3]:
  num2:=x[7]:
  x[3]:=(num1+num2) mod p:
  x[7]:=(num1-num2) mod p:
  num1:=x[11]:
  num2:=x[15]:
  x[11]:=(num1+w[5]*num2) mod p:
  x[15]:=(num1-w[5]*num2) mod p:
  num1:=x[2]:
  num2:=x[6]:
  x[2]:=(num1+num2) mod p:
  x[6]:=(num1-num2) mod p:
  num1:=x[10]:
  num2:=x[14]:
  x[10]:=(num1+w[5]*num2) mod p:
  x[14]:=(num1-w[5]*num2) mod p:  
  num1:=x[4]:
  num2:=x[8]:
  x[4]:=(num1+num2) mod p:
  x[8]:=(num1-num2) mod p:
  num1:=x[12]:
  num2:=x[16]:
  x[12]:=(num1+w[5]*num2) mod p:
  x[16]:=(num1-w[5]*num2) mod p:
  
  #third round
  num1:=x[1]:
  num2:=x[3]:
  x[1]:=(num1+num2) mod p:
  x[3]:=(num1-num2) mod p:
  
  num1:=x[9]:
  num2:=x[11]:
  x[9]:=(num1+w[3]*num2) mod p:
  x[11]:=(num1-w[3]*num2) mod p:
  
  num1:=x[5]:
  num2:=x[7]:
  x[5]:=(num1+w[5]*num2) mod p:
  x[7]:=(num1-w[5]*num2) mod p:
  
  num1:=x[13]:
  num2:=x[15]:
  x[13]:=(num1+w[7]*num2) mod p:
  x[15]:=(num1-w[7]*num2) mod p:
  
  num1:=x[2]:
  num2:=x[4]:
  x[2]:=(num1+num2) mod p:
  x[4]:=(num1-num2) mod p:
  
  num1:=x[10]:
  num2:=x[12]:
  x[10]:=(num1+w[3]*num2) mod p:
  x[12]:=(num1-w[3]*num2) mod p:
  
  num1:=x[6]:
  num2:=x[8]:
  x[6]:=(num1+w[5]*num2) mod p:
  x[8]:=(num1-w[5]*num2) mod p:
  
  num1:=x[14]:
  num2:=x[16]:
  x[14]:=(num1+w[7]*num2) mod p:
  x[16]:=(num1-w[7]*num2) mod p:
  
  #fourth
  num1:=x[1]:
  num2:=x[2]:
  x[1]:=(num1+num2) mod p:
  x[2]:=(num1-num2) mod p:
  num1:=x[9]:
  num2:=x[10]:
  x[9]:=(num1+w[2]*num2) mod p:
  x[10]:=(num1-w[2]*num2) mod p:
  num1:=x[5]:
  num2:=x[6]:
  x[5]:=(num1+w[3]*num2) mod p:
  x[6]:=(num1-w[3]*num2) mod p:
  num1:=x[13]:
  num2:=x[14]:
  x[13]:=(num1+w[4]*num2) mod p:
  x[14]:=(num1-w[4]*num2) mod p:
  num1:=x[3]:
  num2:=x[4]:
  x[3]:=(num1+w[5]*num2) mod p:
  x[4]:=(num1-w[5]*num2) mod p:
  num1:=x[11]:
  num2:=x[12]:
  x[11]:=(num1+w[6]*num2) mod p:
  x[12]:=(num1-w[6]*num2) mod p:
  num1:=x[7]:
  num2:=x[8]:
  x[7]:=(num1+w[7]*num2) mod p:
  x[8]:=(num1-w[7]*num2) mod p:
  num1:=x[15]:
  num2:=x[16]:
  x[15]:=(num1+w[8]*num2) mod p:
  x[16]:=(num1-w[8]*num2) mod p:
  
  #2 9
  num1:=x[2]:
  x[2]:=x[9]:
  x[9]:=num1:
  #3 5
  num1:=x[3]:
  x[3]:=x[5]:
  x[5]:=num1:
  #4 13
  num1:=x[4]:
  x[4]:=x[13]:
  x[13]:=num1:
  #6 11
  num1:=x[6]:
  x[6]:=x[11]:
  x[11]:=num1:
  #8 15
  num1:=x[8]:
  x[8]:=x[15]:
  x[15]:=num1:
  #12 14
  num1:=x[12]:
  x[12]:=x[14]:
  x[14]:=num1:
  return x;
end proc: