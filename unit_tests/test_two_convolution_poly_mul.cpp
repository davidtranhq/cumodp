#include <gtest/gtest.h>
#include "two_convolution_poly_mul.h"
#include <thrust/host_vector.h>
#include <thrust/device_vector.h>
#include <fstream>
#include <gmpxx.h>
#include "list_stockham.h"

TEST(TwoConvolutionPolyMul, FindLargestBitWidthOfCoefficients)
{
    auto run_test = [](const UnivariateMPZPolynomial& a, const UnivariateMPZPolynomial& b, int expected_bit_width) {
        EXPECT_EQ(find_largest_bit_width_of_coefficients(a, b), expected_bit_width);
    };
    {
        UnivariateMPZPolynomial a = {1, 2, 3};
        UnivariateMPZPolynomial b = {4, 5, 6};
        run_test(a, b, 3);
    }
    {
        UnivariateMPZPolynomial a = {0xabcd, 0x1234, 0x5678};
        UnivariateMPZPolynomial b = {0x9abc, 0xdef0, 0x1234};
        run_test(a, b, 16);
    }
    {
        UnivariateMPZPolynomial a = {4, 5, 6};
        UnivariateMPZPolynomial b = {7, 8, 9};
        run_test(a, b, 4);
    }
    {
        UnivariateMPZPolynomial a = {-1, -2, -3};
        UnivariateMPZPolynomial b = {-4, -5, -6};
        run_test(a, b, 3);
    }
    {
        UnivariateMPZPolynomial a = {0};
        UnivariateMPZPolynomial b = {0};
        run_test(a, b, 1);
    }
    {
        UnivariateMPZPolynomial a = {1, 2, 3};
        UnivariateMPZPolynomial b = {0};
        run_test(a, b, 2);
    }
    {
        UnivariateMPZPolynomial a = {1, 0};
        UnivariateMPZPolynomial b = {0xffffffff, 0};
        run_test(a, b, 32);
    }
    {
        UnivariateMPZPolynomial a = {mpz_class("ffffffffffffffffffffffffffffffffffffffff", 16), 0};
        UnivariateMPZPolynomial b = {1, 0};
        run_test(a, b, 160);
    }
}

TEST(TwoConvolutionPolyMul, ConvertToModularBivariate)
{
    {
        UnivariateMPZPolynomial a = {1, 2, 3};
        BivariateBase base = {.N = 4, .K = 2, .M = 2};
        EXPECT_EQ(convert_to_modular_bivariate(a, base, 401), BivariateMPZPolynomial({1, 0, 2, 0, 3, 0}));
    }
    {
        UnivariateMPZPolynomial a = {0xabcd, 0x1234, 0x5678};
        BivariateBase base = {.N = 16, .K = 2, .M = 8};
        EXPECT_EQ(convert_to_modular_bivariate(a, base, 401), BivariateMPZPolynomial({0xcd, 0xab, 0x34, 0x12, 0x78, 0x56}));
    }
    {
        UnivariateMPZPolynomial a = {4, 5, 6};
        BivariateBase base = {.N = 4, .K = 2, .M = 2};
        EXPECT_EQ(convert_to_modular_bivariate(a, base, 401), BivariateMPZPolynomial({0, 1, 1, 1, 2, 1}));
    }
    {
        UnivariateMPZPolynomial a = {-1, -2, -3};
        BivariateBase base = {.N = 4, .K = 2, .M = 2};
        EXPECT_EQ(convert_to_modular_bivariate(a, base, 401), BivariateMPZPolynomial({400, 0, 399, 0, 398, 0}));
    }
}

TEST(TwoConvolutionPolyMul, ScaleXArgumentDev)
{
    auto run_test = [](const BivariateMPZPolynomial& A, const BivariateBase& base, sfixn theta, sfixn prime) {
        thrust::device_vector<sfixn> A_dev(A.begin(), A.end());
        scale_x_argument_dev(A_dev, base.K, theta, prime);
        thrust::host_vector<sfixn> result = A_dev;
        return result;
    };
    {
        BivariateMPZPolynomial A = {1, 0, 2, 0, 3, 0};
        BivariateBase base = {.N = 4, .K = 2, .M = 2};
        sfixn theta = 400;
        sfixn prime = 401;
        EXPECT_EQ(run_test(A, base, theta, prime), (BivariateMPZPolynomial{1, 0, 2, 0, 3, 0}));
    }
    {
        BivariateMPZPolynomial A = {1, 1, 1, 2, 2, 2, 4, 4, 4};
        BivariateBase base = {.N = 6, .K = 3, .M = 2};
        sfixn theta = 2;
        sfixn prime = 401;
        EXPECT_EQ(run_test(A, base, theta, prime), (BivariateMPZPolynomial{1, 2, 4, 2, 4, 8, 4, 8, 16}));
    }
    {
        BivariateMPZPolynomial A = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        BivariateBase base = {.N = 6, .K = 3, .M = 2};
        sfixn theta = 2;
        sfixn prime = 401;
        EXPECT_EQ(run_test(A, base, theta, prime), (BivariateMPZPolynomial{1, 4, 12, 4, 10, 24, 7, 16, 36}));
    }
}


TEST(TwoConvolutionPolyMul, TwoConvolutionPolyMul)
{
    auto run_test = [](const UnivariateMPZPolynomial& a, const UnivariateMPZPolynomial& b, const UnivariateMPZPolynomial& expected) {
        EXPECT_EQ(two_convolution_poly_mul(a, b), expected);
    };

    // auto sci = [](const std::string &s) -> mpz_class {
    //     size_t pos = s.find_first_of("eE");
    //     if (pos == std::string::npos)
    //     {
    //         return mpz_class(s);
    //     }
    //     std::string significand_str = s.substr(0, pos);
    //     std::string exponent_str = s.substr(pos + 1);
    //     mpz_class significand(significand_str);
    //     unsigned long exponent = std::stoul(exponent_str);
    //     mpz_class factor;
    //     mpz_ui_pow_ui(factor.get_mpz_t(), 10, exponent);
    //     return significand * factor;
    // };

    // run_test(
    //     {1, -4},
    //     {2, 5, -3},
    //     {2, -3, -23, 12}
    // );

    // run_test({1}, {1}, {1});
    // run_test({1}, {0}, {0});
    // run_test({0}, {0}, {0});
    // run_test({-1}, {1}, {-1});
    // run_test({1, 2, 1}, {1, 2, 1}, {1, 4, 6, 4, 1});

    // 10x10
    run_test(
        {3, -2, 2, 1, -5, 1, -4, 3, 5, -1, -5},
        {-2, -4, -3, -1, -5, -3, -4, 2, 1, 3, 5},
        {-6, -8, -5, -7, -13, 14, 2, 15, 2, -6, 46, -2, 8, -34, -12, 25, 12, 19, 17, -20, -25});

    // 12x12
    run_test(
        {3, 3, 4, 1, 5, 3, -5, 1, -5, 1, -2, -4, -4},
        {-1, 3, 5, 3, 3, -3, -3, 2, -3, -3, 3, 3, 1},
        {-3, 6, 20, 35, 36, 29, 36, 2, -11, -45, -66, 10, -6, -39, 4, 6, 19, 23, -10, -1, 16, -5, -26, -16, -4});

    // 15x15
    run_test(
        {1, 5, 5, 5, 3, 3, -4, -3, 2, 3, -5, -3, 2, -3, -5, -1},
        {-2, 3, 5, 4, -5, 3, 3, -4, 0, 1, -1, 4, -3, 5, 3, 5},
        {-2, -7, 10, 34, 49, 26, 45, 22, -26, -41, 39, 18, -52, -17, 84, 16, -17, 42, 80, -14, -10, -26, 8, 9, -29, -34, -13, -21, -35, -28, -5});

    // 16x16
    run_test(
        {3, -3, -4, 4, -2, 0, 3, -2, 0, 0, 1, 0, 0, 1, -3, 5, 5},
        {-4, 0, -3, 1, 2, 3, -1, -5, -2, 5, -3, 5, -3, -5, 4, -2, 1},
        {-12, 12, 7, -4, 23, -13, -22, -10, 12, 40, -34, 11, 0, -64, 83, -21, -51, 31, -54, 9, 40, 14, -15, -60, 33, -10, 15, 29, -54, 2, 7, -5, 5});

    // 10x17
    run_test(
        {4, 0, 5, -5, 1, 5, 3, -1, -2, -3, -1},
        {4, 0, -1, 2, 0, -4, -2, 2, 1, 1, -3, -2, -1, -5, -4, 1, -2, 5},
        {16, 0, 16, -12, -1, 19, -7, -19, 13, 15, -43, -29, -20, 5, 8, -25, -30, 25, -43, 14, -18, 17, 42, 32, 0, -5, -13, -5});


    // 25x25
    run_test(
        {-3, 5, 3, 5, 4, 3, 0, -5, -1, -5, -2, 2, 3, -3, -4, 4, -3, -2, -4, -1, 1, 3, -4, 2, 1, 3},
        {1, 4, 1, -5, 4, 3, -2, 0, 0, -2, 1, 0, 3, 5, 1, -4, 2, 4, 5, -1, -1, -2, 0, -4, -5, 4},
        {-3, -7, 20, 37, -10, 20, 24, -3, -11, 6, -10, -33, -1, 5, -15, 32, 70, 20, -47, 27, 6, 17, 9, -26, -20, -27, -82, -81, 28, 33, -2, -3, -15, 63, -40, -63, -23, 92, 18, -14, 15, 33, 29, 5, -29, 0, 18, -30, -9, -11, 12});

    // 50x50
    run_test(
        {0, 0, 3, 4, -3, 1, 4, 4, 5, 0, -5, -1, -3, 1, 3, -3, 1, 1, 5, -1, 1, -2, -3, 2, 3, 4, -4, -2, 0, -2, -2, -4, 2, 1, 2, 3, -1, 1, 1, 1, 4, 3, -2, 0, 2, 4, 4, -5, -1, -1, 3},
        {4, 3, -4, -5, 5, 3, 1, -5, 2, 2, 3, -2, -5, -1, 3, 4, 4, 1, 4, -4, -4, -2, 1, 4, -2, 0, -2, -5, 1, -2, 5, 2, 4, 5, 2, 0, 5, -3, -2, 3, -4, -3, -3, 4, 2, 1, 0, -3, 1, 4, 3},
        {0, 0, 12, 25, -12, -36, 26, 68, 11, -36, -54, 18, 52, 25, -30, -35, 3, 60, 49, -24, -62, -5, 61, 61, 89, -14, -76, -117, -11, 50, -32, -6, 3, 63, 41, -40, 17, -23, 84, 119, 4, 89, 1, -79, -74, -47, 20, -59, -28, 32, 183, 62, -21, -33, 25, 55, 62, 48, -7, -16, -34, -39, -33, 10, -23, -125, 13, 57, 139, 32, -43, 27, -31, 66, 43, -18, 37, -1, 21, -23, -25, -36, 6, 7, 53, 3, -31, -12, 20, 85, 8, -21, -36, 9, 46, 29, -6, -29, -4, 9, 9});

    // 100x100
    run_test(
        {3, 1, -4, 4, -3, -4, 2, 5, 5, -3, 4, 4, -5, 5, -5, -4, 5, 4, 3, -5, 4, -1, 1, 4, 3, -5, -3, 4, 3, 2, 2, 3, 4, 0, -1, 1, 1, 3, 2, 2, -2, 2, -1, 5, -2, 4, -2, -2, 5, 0, 3, -3, 0, 3, 5, -4, 4, 3, -4, -1, -5, 4, 3, 3, -3, 5, 0, -2, 5, -1, 3, -3, 2, -3, -2, 4, 2, 3, 1, 2, 2, 3, 4, -5, 3, -2, 3, 4, 1, -3, 4, 4, 3, -3, 1, 2, 2, 0, 4, -4, -1},
        {0, 4, -2, 0, 4, -2, -3, -3, -2, -4, 5, 5, 0, -2, 5, -2, -3, 0, 5, 2, 0, 1, -2, 0, -5, 3, 5, 3, 3, 0, 0, 2, -1, -4, -1, 1, -4, -4, 5, 0, -4, -3, -5, -5, 4, 3, -3, -4, -4, -5, -5, 2, 0, -2, -1, -5, 1, -4, -1, 0, 2, -2, 2, 0, 3, -3, -2, 4, 4, -1, 1, -3, -2, 1, -2, 2, 0, 1, -2, 5, -3, -5, 1, 0, -3, -4, -1, -3, 2, -5, 1, -2, 1, -2, -4, -2, -3, 3, -5, 4, 2},
        {0, 12, -2, -18, 36, -22, -37, 28, -1, -14, 10, 87, -1, -57, 52, -74, -116, 86, 45, -35, 0, 147, -23, -99, 27, -22, -14, 66, 95, -51, -51, 46, -25, -34, 113, 13, -7, -44, 123, -2, -156, 76, 73, -59, -52, 51, 16, -28, 36, 52, -124, 55, 4, -104, 18, 106, -98, -12, 27, -50, -75, 0, 106, -105, -11, -127, -15, 104, 23, -58, -140, -15, -120, -15, -51, 74, 72, -153, -169, -10, 83, -124, 0, 45, -116, -158, -12, -89, -4, -79, -15, 21, -29, -86, -106, 69, -19, -84, -84, 32, 8, -8, -113, -101, -178, -5, 112, 71, 33, -80, 90, -292, -10, 9, -112, -31, 2, -17, -170, -87, -21, -1, -104, -63, -70, -92, -87, -140, -161, 27, -107, -33, -28, -65, -220, -35, 74, -226, 1, -151, 62, -130, 55, -100, 14, -4, -118, 10, -59, 50, -80, -23, -79, -8, 115, -30, 12, -80, 69, -81, 21, -76, -24, -45, -36, 46, -80, 8, -74, 18, -20, -73, -41, -72, 25, -76, -56, -12, -16, -22, -26, -2, -53, -5, -7, -47, 2, 4, -5, -13, -4, 18, -20, 4, 0, 38, -25, 33, -3, -12, -2});
    
    // 1000x1000
    // run_test(
    //     {-4, 3, 0, -1, -2, 5, -1, -1, 4, -3, -3, 3, 3, -5, 3, 4, -3, -5, -2, 0, -2, 0, -1, 2, -1, -4, 3, 2, -2, 0, -2, 3, -2, -3, 3, -1, -4, 0, 1, -4, 5, 3, 4, 1, -1, 5, -5, 3, -5, 0, 1, -2, 2, 1, 0, 5, 1, 3, 2, 5, -2, 1, -2, -4, 5, 4, -4, 5, 5, 5, -5, 1, -1, -2, 3, -4, -5, 1, -1, -1, -3, 0, 2, 0, 3, 3, -1, 5, 4, -4, -2, 0, -3, -5, 3, 1, 2, -1, 0, 4, 2, -5, -4, 5, -4, -4, -1, -5, 1, -1, 3, 4, -2, 1, 5, 3, -3, 2, -4, -2, -3, 2, 0, 5, 2, 3, -3, 3, 5, 5, -1, -3, -3, 3, -5, -4, -2, -3, 2, 4, 4, -1, -5, -4, -3, 4, 4, 3, -3, -5, 4, 4, -4, 1, -3, -5, 2, -4, 3, 3, -3, 2, 2, 2, -5, 4, 4, 4, -2, 0, 0, -1, 0, 0, -4, -4, 1, 2, -4, 5, 0, 3, -1, 4, 5, 2, -1, 1, -5, 5, 5, 4, 1, 0, -4, -3, 3, -4, -5, 2, 5, -4, 1, 5, -5, 2, 4, -3, -1, -5, 3, -4, -3, 3, -2, -2, -2, 5, 1, 3, -4, 4, 4, -5, 1, 4, 5, -5, 3, -4, -2, -3, -4, 0, -1, -5, 2, -4, 5, 4, 3, 5, -3, -3, -3, -4, -4, 4, -1, -4, -5, 4, 3, 3, 3, 4, 0, 0, 4, -3, 5, 2, -2, -3, 5, -5, -3, 2, 2, -3, -2, -2, -3, -5, -5, 5, 4, 4, -5, -1, -3, -4, 3, 1, 0, -3, -3, 5, 1, -3, 4, 5, -1, -5, 5, 1, -4, -2, 2, 4, 5, 5, -2, -1, -4, 2, 5, 4, -5, -1, -2, -5, 5, 5, -2, 2, 4, -5, -4, 1, -4, -2, -2, 4, 1, -4, -4, -1, -3, -3, 5, 4, 2, -3, 1, -5, 3, 5, 2, 2, 1, -5, 4, 3, -5, -4, 3, 2, 1, 3, 5, 5, -4, 2, -3, 5, -1, 1, 4, 3, -3, -1, 2, -5, -4, 3, 1, -3, -4, 1, -4, 3, -3, 2, 3, 0, -3, -4, -5, -1, -3, -3, -3, 0, 5, -4, 2, 2, -1, -5, 2, 5, -1, -4, 1, 5, 4, -4, -3, -5, 2, 1, -5, -4, -3, -2, -5, -3, -2, 5, 2, -1, 3, -3, -1, 4, 0, -2, -5, -3, 0, -4, -1, 5, 5, -1, 2, 4, 5, -3, 0, 3, -2, 2, 0, -2, -4, -4, -2, -1, -5, 3, 0, 0, 2, 4, -4, 1, -5, -3, 4, 0, 5, 0, -5, 5, 3, -4, 4, -5, 1, 0, 5, -1, 2, -2, 0, 3, -3, -3, -4, 0, -4, -3, 4, 1, -3, -5, 1, -3, 5, 3, 1, 1, 1, -2, 4, -1, -2, 1, 4, -1, 4, 2, 5, -1, 2, -1, 5, 4, -4, 5, -4, 1, -5, -3, -5, 1, -5, 2, -5, -2, 5, 5, 5, 3, 3, 5, 4, 0, 4, 1, 3, -1, 2, 3, 1, -4, 0, -5, -1, 4, 5, -1, 2, -1, -2, 1, -2, 4, 0, 4, -4, -1, 0, 3, -2, -4, 3, -3, -1, -1, -4, -2, 2, -2, 2, -4, 5, -5, 3, 4, -4, 2, -4, -3, 4, -2, 3, -2, 4, -2, -1, 1, 0, 2, 5, 5, -2, -5, 4, 0, -2, -5, 5, 3, -5, 0, -5, -5, 4, -2, 5, 5, 4, -3, 4, 2, -3, 5, -2, 1, -5, 4, 0, 0, 4, 4, -1, -2, 2, -4, -3, 3, 0, -5, 5, -5, -2, 1, 5, -5, 5, -4, 0, -5, 0, 4, 3, 4, 5, 1, 3, 5, -5, -1, 5, 3, 2, -3, 1, 5, -5, 5, 0, 2, 1, -4, -1, 4, -3, 2, 3, 2, 5, -1, 4, 3, -3, 0, -5, 1, -1, -2, -4, -3, -5, -1, -3, 1, -4, -2, 0, -4, 3, 3, -5, -5, -2, 3, -4, -4, -5, -1, 1, 5, -2, 1, 3, 0, 4, -5, 1, 3, 0, 4, 5, 2, 0, -1, -5, -5, -4, -2, 2, -1, -3, 2, 1, -5, 0, -5, 4, 3, -3, 3, 0, -2, 1, 5, -4, -5, 0, -5, 0, 1, 2, -4, 4, 4, 2, 5, -5, -4, -3, -1, 2, 0, 0, -5, 3, -3, 2, 5, 1, 1, 0, -1, 1, -4, -5, -3, 1, -5, -1, -3, -1, 2, 4, -2, 2, 1, 3, 0, 4, -5, -3, 4, 4, -4, 5, -1, 3, -2, 4, -3, -4, -1, -5, 5, -4, 1, -2, -4, 3, -4, -5, 4, 4, 5, -5, 3, 4, -2, -3, 0, -1, 0, 4, -3, -1, 2, -2, 4, 1, -4, -5, -3, 4, -1, -5, 2, -3, -2, -5, -1, -2, -2, 3, -3, -2, 3, -1, -3, 0, -4, -1, -2, -4, 1, 5, -1, 4, -5, 1, -2, 0, 5, -5, -5, 4, 1, -5, -4, -3, 0, 1, 1, -4, 3, -2, -1, -3, 4, -1, 1, 5, 0, -1, 3, -1, -5, -2, 2, 0, 1, -4, -2, -5, 0, 5, 3, -1, 0, 1, -5, 0, -2, -2, 3, -4, 5, 4, -5, 1, -3, 5, 3, -3, -4, -2, -5, -2, -1, -2, 1, -2, -4, -1, -1, 2, 4, 5, 4, 3, -5, -1, -2, 1, 4, -3, -3, 2, -2, -4, -4, 2, 5, 4, 2, 5, -1, -5, 2, 2, 3, -2, 3, -3, -3, -4, 2, 4, -5, 5, -3, 5, -2, -2, -4, 2, 1, -2, 4, 2, 2, -3, -4, -2, 0, 3, 2, -5, -4, -5, -4, -1, 0, -1, -5, -1, 1, -5, -5, 0, 1, -4, 0, -3, -3, -1, -4, -2, 2, 1, -1, 0, 1, 5, 1, 3, 4, -4, -4, 2, -2, -4, -4, -5, 2, -5, 4, 5, -1, 2, -5, -1, 5, 0, 4, -4},
    // {0, 5, 0, 5, 3, -1, -1, 2, 2, -2, -2, -4, -5, -3, 0, -4, -4, -1, -3, 4, -2, 5, 2, -3, 3, 4, 0, -3, -2, 5, 2, 2, -1, -5, 1, 3, 5, -1, -5, -5, 0, 3, -5, -2, -4, 0, -5, 0, 4, 5, -1, -4, 5, -3, 3, -5, -2, -5, -2, 2, -1, -4, 2, 4, -2, 4, 2, -3, 2, -3, 3, 3, -2, -4, 1, 0, 5, 1, -3, 5, -3, 1, 4, 5, 1, 1, -1, 4, 2, 2, 1, -3, 0, 5, -2, -5, -2, 5, -5, 2, 5, -5, -3, 4, 0, -5, -4, 3, 2, 1, -4, -4, 0, -5, -5, -1, 5, 0, 2, 4, 3, 5, 3, -3, 1, -2, -3, -2, 1, 5, -4, 2, 1, -2, 4, 0, 4, 0, 4, 3, -2, -3, -1, 5, 0, 5, -1, 1, 5, -2, 2, 4, 1, -4, 1, 3, -3, 5, -3, -3, 2, 3, -3, -4, -3, 4, -1, 0, 3, -1, 1, -5, 5, 1, 1, 5, 1, -2, -2, 3, -4, 1, -4, 1, -5, 0, -1, 4, -2, 0, 0, -5, 3, -4, 1, -3, 1, -4, -3, 3, 4, -3, -5, -4, 4, 5, -2, -4, 1, 3, -2, 1, 1, -2, 5, -4, -4, -3, 5, -4, 0, 0, 5, -1, -4, -3, -2, 0, -5, -2, 3, 1, 4, -5, -5, -1, 3, -2, -1, 0, 4, 2, 0, 1, 4, 5, 5, 0, -5, 0, -5, -5, 0, 5, 1, 0, -3, -4, 5, -5, 4, 1, 4, 1, -4, -3, 5, 0, -4, -1, 4, -5, 1, 3, 5, -3, 1, 2, -4, 4, 2, -3, 4, 5, -2, -2, -1, -3, 1, 2, -5, -4, -3, 3, -4, 4, 4, -1, -5, -3, 3, 4, -3, -5, -4, 1, 2, -1, 1, 3, -1, 1, -1, 5, 3, 0, -2, 1, 0, -3, 4, 1, 5, 5, 1, -3, -2, -5, -1, -3, -4, 3, -5, 2, 0, -5, 2, 4, 3, -1, 3, 3, 4, 0, 5, 3, -3, -5, 0, -1, -3, -3, -1, 1, 0, 2, -2, 5, 4, -1, -1, 1, 3, -5, -3, -2, -2, 2, -5, 1, -3, 0, 2, -2, 5, -3, 3, -1, -4, -4, 3, 4, -5, 3, 4, -5, 2, 5, 5, -2, -2, 3, 5, 3, -2, -3, 2, 2, 2, 0, 2, 3, -2, 2, 3, -4, -5, 0, 2, -5, -3, -2, 2, 5, 1, -4, -5, 5, -5, 0, 0, -5, -2, -1, 1, 5, -1, 1, -3, 5, 4, 3, -2, -5, -5, -3, 4, -5, -1, 2, -1, -2, -3, 0, 2, 2, -1, -5, 5, -2, -5, -3, 2, 5, 1, -4, -2, 2, 3, -3, 1, 0, -4, 3, 1, 4, -1, -3, -5, 3, -4, 5, -2, -1, -5, -5, -5, -1, -2, 3, -5, 0, 0, -1, 0, 1, -4, -2, 2, 2, 4, -3, -5, 4, 0, -4, -2, -1, 3, 4, -4, 0, 3, 1, -3, -2, 2, 1, 0, 2, -3, -1, 4, -4, 1, 2, -4, -3, -1, -2, -2, 5, 4, -1, -3, 3, -5, -1, -4, -1, 3, 4, -1, -4, -5, 1, -5, 1, -1, -2, -3, 2, 4, -3, -1, -3, -3, -3, -2, -5, 5, -3, -5, -1, -5, -3, -3, -4, -1, 4, -2, -5, -3, 2, 3, -2, 2, 2, 3, 3, 0, -1, 3, 1, 5, 5, -1, -1, 2, 5, -4, 5, -4, -3, -5, 2, -5, -3, 1, -1, 0, 1, 5, 1, 1, -2, 0, -2, 5, -3, -5, -2, 2, 5, 0, -2, 4, -2, 2, -1, 1, 3, 1, -1, 4, -1, 4, 5, -1, 0, -3, 5, -1, 3, 0, 5, 2, -1, -4, 1, -3, -4, 5, -3, 5, 3, -3, -1, 4, 2, 5, -4, 2, -2, 3, -3, -2, -1, -4, 4, -4, -3, -1, -5, 1, 5, -1, -2, -4, -3, 3, 5, 0, 3, 1, 5, 3, 0, -4, -4, 5, 0, 0, 1, -3, 4, 5, 3, -3, -2, 4, 5, 4, -5, 3, 2, 5, -4, 5, -3, 4, 1, -2, -4, -5, 3, 3, -1, -3, 2, 5, 5, -2, 2, -5, 3, 1, -4, -1, -4, 0, 3, 3, 4, 5, -4, -2, 2, -5, -1, 5, -3, -1, 4, 0, 1, 4, 2, -5, 4, 2, 3, 3, -1, -1, -4, 5, -5, -1, -1, 3, -5, 0, 2, 5, 5, 1, 3, -5, -3, -3, -4, 5, -3, -2, -1, 1, 5, 5, 5, -2, -3, 0, 0, 2, -5, 4, 4, -1, 3, -2, 5, -2, -5, -1, 5, -2, 5, 1, -1, 3, 0, 1, 2, 5, -1, 5, 0, 5, 1, -1, 1, -4, -1, 2, 3, 5, 3, 5, 2, 2, -2, -2, -2, -5, 5, 4, 5, 0, 3, 5, 5, 5, 5, 5, 5, 1, 3, 1, 5, -3, -2, 5, 4, 3, -4, 2, -4, -2, -2, 4, 0, -3, 4, -2, -3, -2, 4, -3, -2, -4, 0, 1, 1, -2, 2, 0, -1, -2, -3, 0, -4, 3, -3, -5, 0, 2, -2, 3, -5, 5, 1, 4, 2, 2, -2, -2, -5, 0, 0, -2, 5, -4, -5, 4, 1, 2, 0, -2, 4, 5, 1, -2, -3, 3, 2, -3, -3, 0, 5, 0, 1, -5, 0, -1, -3, -5, -5, 3, 0, -2, -2, 4, -3, 0, 1, -4, -2, 5, -3, 3, 0, 0, 4, 3, 0, 3, 4, -1, -2, -3, -4, -1, -1, -3, 0, 5, 0, 3, 5, 0, -2, 2, -5, 5, 0, 2, 3, 0, -5, -1, -2, -3, 5, 0, -3, -4, -1, 1, -1, 0, 2, -4, 1, -5, 2, -4, -2, -3, -4, 5, 4, -4, 2, 2, 4, -1, 1, 1, -3, 2, -4, -1, 4, -3, -2, 3, -2, 4, 0, 3, -5, 1, -4, 5, 3, -3, -1, 2, 4, 2, 4, 5, 2, 0, -3, 5, 3, -1, 3, 4},
    // {0, -20, 15, -20, -2, 3, 21, -29, 13, 47, -26, 2, 30, -1, -35, 72, 7, -62, 11, -8, -41, -74, 44, -34, -30, -30, 10, 36, -30, 28, 64, -15, 15, 62, 1, -4, 36, 35, -68, -44, 4, 26, 3, 22, 39, 39, 42, -81, 124, -71, 25, -3, -65, -16, -141, 78, 21, -2, -89, 100, 79, 0, 60, 75, 101, -161, 41, -4, -22, -71, -49, 79, -12, -72, 39, 41, 39, -12, 38, -96, -92, 3, -61, -50, -127, 5, 132, -89, 126, 116, 213, 43, -29, 42, 94, -86, -146, -111, -67, -70, -203, -62, -36, -29, 81, 102, -119, -107, 151, -59, -175, -83, -54, 41, -30, -2, 34, 160, 110, 67, -12, 47, -89, 129, 55, -248, -75, 62, -48, -65, 225, 151, 28, -4, 164, 81, -44, -65, -289, 7, 39, -207, -51, 97, 187, -164, 137, 174, 193, 36, 203, -53, -4, 28, -95, -226, -260, -46, 140, 105, -86, -90, 270, -96, 75, -26, 12, -274, -168, 54, -104, 77, -215, -22, 125, 28, 239, 119, -323, -162, 165, 128, -157, -193, -33, -53, 138, 418, 278, -208, 50, 133, 0, 149, -111, 11, -188, -94, 34, 63, -78, -142, 98, 318, 4, -226, 263, 134, -53, -233, 419, -117, 29, 27, 19, 267, 185, -16, -271, 141, 22, 113, -84, -389, -55, -34, 32, -66, -52, 58, 12, -118, 364, -18, -123, -100, -238, 7, -281, 87, -261, -20, 155, 109, 123, 5, 121, 83, 94, 45, -63, -84, -238, -83, 157, 255, -167, -141, 93, 184, 115, 49, 45, -115, -210, 50, 69, 51, 79, 44, -175, -96, 2, 113, -54, -29, -17, -50, 35, -157, -326, -5, 141, -30, 157, 26, -91, 277, 177, 331, 53, -328, -225, -143, -294, -65, 235, -287, -81, 10, 226, 197, -146, 196, 165, 59, -181, 83, 182, -182, 58, -84, -55, 42, -74, -64, -180, 98, -107, 72, 50, -30, 30, 119, 41, 21, 140, 164, 88, 29, -185, 89, -140, -282, 295, 322, -249, 292, 186, -40, 100, 406, -127, -143, 8, -147, -50, -66, -163, -444, 174, 80, -345, -59, 44, -65, -120, 249, -127, -129, 435, -16, -404, -186, 260, 5, -365, 52, 200, -72, 30, -115, 186, -31, -330, 124, 275, 132, -18, 123, -179, -123, 64, 369, -148, -13, -102, -25, -104, -2, -108, 457, -131, -263, -15, 409, -115, -312, 393, 211, -86, -458, 22, 36, -351, 155, -54, -36, -113, 148, -277, 82, 183, 4, -175, -162, -8, -536, -191, 194, -138, 327, 167, 72, -82, 333, 146, 34, 192, -121, 189, 90, 90, 90, 96, 163, 377, -183, -317, 384, -106, -103, -147, 6, 25, 432, -24, -144, 22, -151, -77, 222, 277, -227, -193, 79, -70, -220, 454, 217, -24, -166, 111, -20, -301, -83, 349, -89, 17, 84, -132, 11, 296, -319, -97, -12, -152, -223, -342, 250, 116, 6, 298, -77, 227, -127, 268, 279, -111, -558, -255, 407, -394, -169, 158, 108, -79, -300, 400, 415, 70, -254, -135, 173, 196, 79, -485, 218, -170, -259, 41, -162, 374, 430, -152, -33, 130, 107, -378, -326, 304, 360, -35, 310, -227, -489, 150, 210, -160, -525, 354, -408, -428, -320, 409, -430, -181, -39, -102, -32, -240, 7, 52, 272, 126, -186, 173, -137, 247, -137, -267, -238, 248, 35, -280, -428, -361, -143, -161, 152, 73, 391, 44, 176, 199, 15, -228, 297, -329, 73, 232, 12, -299, 93, -93, 187, 179, 565, -279, 157, 454, -353, 278, 466, 142, -624, -72, -429, -392, 1, -86, -323, -169, 86, -248, 211, 585, -17, 124, 74, 219, -25, 225, -369, 24, -188, 188, -610, -241, 499, 157, -298, 46, 307, -106, -3, -2, 28, -126, 170, 134, -198, -30, -269, -295, 170, -447, -89, 307, 126, 39, 138, 723, -204, -187, 345, 23, 363, -94, -44, -374, 56, -517, -287, 467, -218, -136, -231, 268, -209, 72, -104, 79, 238, -26, 290, 347, -226, 49, -199, 199, 133, -241, 247, -122, -336, -32, 156, 179, 28, 528, -237, -184, -36, -2, 258, -461, 56, 41, 8, 20, -132, 292, -380, 138, -378, -101, 85, 371, 388, 76, 87, 561, 330, -426, -377, 539, 52, -351, 71, -464, -320, -422, 245, 494, -149, 301, 44, -123, -384, -547, 307, -143, 46, -280, 19, -124, -174, -313, 114, 641, -150, -199, -70, 277, -9, 130, -5, 147, 138, -204, 346, 143, -155, -193, 465, -356, 400, 65, -89, 219, -58, -408, -7, 345, 99, -256, -493, 573, -117, 132, -350, -375, 328, 98, 136, -462, -48, -107, 165, 105, 115, -68, 41, 361, 74, -27, 656, -345, 87, -21, 19, 588, -438, -499, 365, -15, -218, 611, -166, -334, 81, -87, -42, 354, 150, -367, -248, 493, 16, -317, -21, -159, -219, 390, 372, -3, 28, 280, 33, 133, 0, -215, 131, -211, 85, -222, -213, 110, -397, -473, 522, -52, 235, 331, -305, -71, -142, -635, 144, -269, 53, 271, -358, 276, -401, 240, 251, 455, -266, -239, -63, -67, -382, -215, -87, 506, -184, 287, 57, 576, -326, -175, -79, 44, 150, -293, -300, -473, -145, 212, 419, -84, 431, 632, 417, -41, 516, 39, -58, -153, -62, -47, 220, 9, 2, 115, 375, -142, -155, -58, -99, 378, 714, 144, -72, 135, -71, -271, 494, 854, 398, 205, -35, -491, 91, 189, -429, -381, 43, 141, -172, 121, -150, 99, -469, 42, -212, 87, -221, -482, -87, -243, 497, -336, 596, 351, -361, 91, -148, 192, 203, -119, 162, -619, 825, 645, 397, -4, 33, -491, 363, 254, -133, 217, 417, -361, 69, -141, 672, -43, -593, -153, 106, 265, -359, 138, 396, -76, 441, 34, -415, 179, -585, 89, -53, -26, -167, 118, 296, -309, 29, 303, 321, -442, -579, -67, 124, 252, -596, -569, 142, -224, 5, 96, 82, 160, -75, 520, -39, 176, -9, 558, -198, 225, 133, -78, 216, -197, -175, 124, -217, -413, 239, 16, 521, -375, -11, 34, -58, -62, -141, -75, -106, -194, -464, -42, 663, 60, -104, 35, 197, 796, 381, -185, 170, -276, -106, 198, -798, -23, -125, -410, 533, -400, -361, 15, -634, -377, 292, 261, 14, -112, -267, 483, -200, 316, -24, -67, 251, 359, -440, 234, 284, -72, 14, -75, 394, -395, 339, -417, 259, -885, 132, -142, -122, -190, 78, -541, 277, -177, 62, -116, -52, -211, -2, -21, 57, -67, 13, -304, 295, -196, 280, -150, -191, 3, -22, -63, -491, 317, -72, -379, -95, -82, 67, 407, -157, -499, -393, -473, 397, 358, -531, 267, 105, -307, 13, 183, -297, -49, 68, -313, -5, -250, -40, 267, -49, -62, 308, 222, 612, -478, -624, -255, 157, -21, -101, -514, 135, 108, -186, 224, 366, -192, 511, 34, 629, 307, -271, -143, -544, -187, 29, -285, -150, 387, -383, 210, 148, -100, -228, 466, -598, -395, 7, 188, -184, -180, 216, -223, 93, 220, 86, 128, -169, 186, -179, 43, -36, -52, 69, -351, 588, 137, 616, 504, -69, 69, -298, -132, -6, 65, -331, 55, -45, 160, -252, 211, 150, 280, -160, 295, -164, -117, 278, -247, -191, 183, 141, -198, 212, -204, 155, -144, -242, -13, 154, -256, 127, -472, 10, 65, -429, 86, 240, 62, -15, 0, -280, -313, 369, 162, -199, 72, -257, -111, -227, -75, -145, 388, 95, -143, -73, 135, 6, 2, 364, 432, 48, 315, 337, -91, -232, 276, 467, -166, 416, -170, -234, -72, 107, -201, 335, -567, -534, -230, 311, 200, 217, 136, 104, -120, 21, 140, 152, 117, 63, -210, -238, 99, 106, -167, -4, 125, -194, 299, 841, 70, -297, 849, 416, 34, -243, -44, -18, 374, 274, -139, -138, 11, 56, -14, 262, 46, 201, 235, -127, 36, -204, 234, -212, -253, -192, -135, 382, -21, 49, -186, 421, 6, -4, -143, 320, 165, -40, -503, 168, 245, 253, 243, 515, -204, 532, 221, -181, 305, -82, 235, -21, 487, -40, 445, 7, -112, -240, 347, 100, 200, 14, 290, -228, 487, 110, -139, -146, -152, 318, -266, 426, 359, 29, 317, 279, 237, 179, 309, 69, 231, 828, -370, -311, 232, -185, 101, -487, -104, -292, -329, 126, -244, 532, -49, -56, 17, 102, 133, -278, 16, 27, 287, 173, -13, 173, -175, 301, -409, -196, 128, -84, 103, -44, 237, 49, 138, 343, -127, 20, 39, -227, 701, -279, -162, -173, -35, 281, -615, -71, 217, 26, 147, 4, 78, -36, 50, -38, 357, -159, -286, 51, 52, 252, -231, 249, 82, -21, 505, -80, 143, 128, 2, 33, -319, 11, -199, 294, 165, -329, 137, 68, -331, 174, 73, 235, 244, 26, 23, 142, 186, 392, 193, -380, 129, 5, -73, -284, -422, 16, 196, 61, -117, -117, 496, 356, 144, -11, -13, -134, 24, 232, 164, 201, 211, -314, 140, 139, -8, -245, -57, 107, -243, -335, 359, 45, -299, -201, -291, -212, 15, -129, -165, -42, -248, 12, 546, -12, -133, -617, -162, -246, -248, -239, 191, -102, 92, 0, -408, 179, -54, -511, 170, -191, 192, 142, -101, 58, -330, -232, 201, -161, -215, 232, -4, 71, 399, -228, 325, -97, 29, 272, -15, 516, 134, -39, 230, -14, -36, 99, 66, 124, 24, 310, -211, -259, 37, -160, 55, -278, -97, -237, -66, 81, -479, -58, -25, 151, 71, -107, -201, -412, -96, 426, 149, 22, -263, 66, -187, -112, 187, -462, 109, -345, -188, -179, 134, -9, 95, 114, 132, 267, -93, -276, -352, -122, -194, -205, 222, 300, -153, 76, 239, -453, 108, 96, -161, -124, -39, 41, -398, -83, -317, -62, -53, 290, 85, -240, 95, 84, -193, 113, -180, -497, -25, -83, -296, -223, -111, -120, 193, -75, 90, 49, -307, 57, 174, 84, 169, -7, -248, -65, -269, -314, -60, 0, -81, 119, 189, 50, 71, -375, 208, -91, 336, -337, -16, -341, 161, -269, -205, -58, -60, 114, -14, 112, -220, -320, -193, -172, -330, 30, -127, 221, -126, -202, -4, 374, 13, 25, 178, -407, -185, -61, -296, 225, -80, -257, 184, -305, -129, -3, -80, -98, -150, 333, -266, -140, -279, -249, 81, -86, 62, -320, 224, -223, -120, -84, -125, 230, 21, 199, 41, -79, -70, -97, -52, -538, 152, 125, -248, 141, -181, -287, 411, -5, -162, 11, -5, 43, -45, -479, 81, 59, -95, 66, 12, -25, -63, 16, 51, 128, -238, 212, -342, -148, -131, 202, 112, 42, 42, -92, 79, 8, -98, 19, -60, 281, -276, -13, -76, -243, 11, 105, 213, -203, 299, 3, 41, 8, -116, 141, -115, -295, 52, -315, 75, -169, -184, -15, 22, -27, -62, -148, -322, -197, -220, 95, 23, -166, 241, -212, -80, 159, -50, 64, 249, -305, 64, -187, -162, -128, -406, -180, -87, -36, -285, -82, -251, -152, -219, -59, 141, 97, -254, 69, -65, -101, -125, 302, 189, 49, -85, 69, 127, -101, 59, -97, 16, 184, -86, -152, 130, -158, -10, -64, -117, -150, 7, 66, 114, -249, 95, 50, -160, -5, 180, -86, 96, -104, -85, -33, 102, 81, 67, -184, -110, 217, -179, -173, -230, 237, 94, -63, -100, -63, 126, 27, 146, 31, 7, -54, -159, -1, -30, -157, 96, -47, 33, 73, -143, 313, -109, -77, 129, 36, 189, 180, -152, -75, -127, 108, 97, 35, -3, 125, -198, -125, 51, -121, 149, -22, 0, -52, 3, -29, -102, -115, -182, 33, 132, -25, 15, -107, 18, -42, -87, -31, 53, 83, -104, -154, -147, 50, 123, 88, 55, -43, 13, -15, -173, -26, -52, 125, -45, -115, 110, 80, -53, 122, 169, 215, 145, 14, 12, -46, 12, -33, 202, -57, 25, -120, 22, 114, -124, 48, -7, 74, -51, 3, 166, 1, -108, -65, -83, 46, 85, 30, -71, -29, -141, -27, 121, 84, 89, -100, -34, 3, -79, -86, -145, 3, -116, -174, -1, -124, 12, -196, -58, 120, -34, -66, -107, -76, -2, -102, 31, -13, -55, -1, -83, 117, 40, -8, -12, -16, -24, -44, 22, 47, -62, -85, -54, 81, -36, 23, -39, -21, -40, -46, 44, 8, 27, 20, -32, 21, -3, 4, 3, 4, 16, 4, -16});
    // run_test(
    //     {sci("1e300"), sci("-2e300"), sci("3e300")},
    //     {sci("-1e500"), sci("2e500"), sci("-3e500")},
    //     {sci("1e800"), sci("-2e800"), sci("6e800"), sci("-9e800")}
    // );
}