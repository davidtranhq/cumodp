/* Authors: Xin Li <xli96@csd.uwo.ca>, Marc Moreno Maza <moreno@csd.uwo.ca> */
/* Copyright (c) 2009 by Marc Moreno Maza.  All rights reserved             */
#include "RegularGcd.h"

///////////////////////////////////////////////////////////////////////////////
extern int Interrupted;

/**
 * Regularize a list of polynomials w.r.t a triangular set.
 */
LinkedQueue *EX_RegularizeList_1(LinkedQueue *RegQueue, 
    LinkedQueue *ToCheckQueue, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr) 
{
    preFFTRep *poly;
    preFFTRep **arrayPoly;
    LinkedQueue *queue, *resQueue, *tmpResQueue, *tmpRegQueue, *ToCheckQueueCopy;
    RegularPair *pair;

    signal(SIGINT, catch_intr);
    if (Interrupted==1) { return NULL; }

    resQueue = EX_LinkedQueue_Init();
    ToCheckQueueCopy = EX_LinkedQueue_Copy(ToCheckQueue, EX_CopyPoly);
    if (EX_LinkedQueue_IsEmpty(ToCheckQueueCopy)) {
        arrayPoly = (preFFTRep **)LinkedQueue2Array(RegQueue, EX_CopyPoly);

        EX_LinkedQueue_Enqeue(resQueue, EX_RegularListPair_Init(RegQueue->count, 
            arrayPoly, EX_CopyOneTriSet(ts)));

    } else {
        poly = (preFFTRep *)EX_LinkedQueue_Deqeue(ToCheckQueueCopy);
        queue = isInvertible_zeroDim(poly, ts, pPtr);
        while( ! EX_LinkedQueue_IsEmpty(queue)) {
            pair = (RegularPair *) EX_LinkedQueue_Deqeue(queue);
            tmpRegQueue = EX_LinkedQueue_Copy(RegQueue, EX_CopyPoly);
            EX_LinkedQueue_Enqeue(tmpRegQueue, (void *)(pair->poly));
            tmpResQueue = EX_RegularizeList_1(tmpRegQueue, ToCheckQueueCopy, pair->ts, pPtr);
            EX_LinkedQueue_Free(tmpRegQueue, EX_Poly_Free);
            EX_LinkedQueue_Concat_1(resQueue, tmpResQueue);
            my_free(tmpResQueue);
            EX_freeTriSet(pair->ts);
        }
        EX_FreeOnePoly(poly);
        EX_LinkedQueue_Free(queue, EX_RegularPair_Free);
    }
    EX_LinkedQueue_Free(ToCheckQueueCopy, EX_Poly_Free);
    return resQueue;
}

/**
 * Find the smallest index next in a polynomial array such that 
 *
 * (1) ary[next] is not NULL, and
 * (2) start < next <= before
 *
 * returns -1 if all are NULL.
 */
sfixn findNextIndex(preFFTRep **ary, sfixn start, sfixn before) {
    sfixn i, next = -1;
    for(i = start + 1; i <= before; i++) {
        if (ary[i] != NULL) return i;
    }   
    return next;
}

LinkedQueue *EX_RegularGcd(preFFTRep *f1, preFFTRep *f2, TriSet *ts, 
    SCUBE *in_scube, MONTP_OPT2_AS_GENE *pPtr)
{
    LinkedQueue *taskQueue, *taskQueue2, *taskQueue3, *resQueue, *regQueue, 
        *regQueue2, *regPolyQueue, *toCheckQueue, *regularQueue, *queue2;

    TaskPair *taskpair, *taskpair2;
    int start, start2, startbackup, next, next2, bool1, bool2, taskinx;
    sfixn N, tmp, a, b, c, d1, d2;
    preFFTRep *LC, *LC2, *poly, *TmpLC, *TmpLC2;
    RegularListPair *listpair;
    RegularPair *regpair, *regpair2;
    preFFTRep *init_f1, *init_f2;

    /////////////////////////////////////////////////////////////
    // only subproduct tree based method implemented
    // //////////////////////////////////////////////////////////
    SPTreeChain_t *scube = (in_scube->cPtr).sptPtr;
    /////////////////////////////////////////////////////////////

    signal(SIGINT, catch_intr);
    if (Interrupted==1) { return NULL; }

    N = N(f1);
    assert(N == N(f2));

    d1 = shrinkDeg(BUSZSI(f1, N), DAT(f1), CUMI(f1, N));
    d2 = shrinkDeg(BUSZSI(f2, N), DAT(f2), CUMI(f2, N));

    if (d1 < d2) { return EX_RegularGcd(f2, f1, ts, in_scube, pPtr); }

    init_f1 = EX_getInitial(f1);
    init_f2 = EX_getInitial(f2);
    resQueue = EX_LinkedQueue_Init();
    taskQueue = EX_LinkedQueue_Init();  
    EX_LinkedQueue_Enqeue(taskQueue, EX_TaskPair_Init(0, EX_CopyOneTriSet(ts)));
    while (!EX_LinkedQueue_IsEmpty(taskQueue)) {

        taskpair = (TaskPair *) EX_LinkedQueue_Deqeue(taskQueue);
        start = taskpair->index;
        a = (scube->w)-1;
        b = scube->doneBfr;
        c = a;
        if (b<c) c=b;

        tmp = (scube->Sdims)[(scube->dim)-1];
        (scube->Sdims)[(scube->dim)-1] = 1;
        TmpLC = interpNextCandidateSliceLCDefective(&next, start, N, N-1, scube->w, 
            ((scube->Ssize)/(scube->w))/(scube->w), scube->Sdims, 
            scube->Ssize, scube->Sdata, scube->points_trees, pPtr);

        (scube->Sdims)[(scube->dim)-1] = tmp;

        if(TmpLC != NULL ){
            LC = EX_NormalizePoly(TmpLC);
            EX_FreeOnePoly(TmpLC);
        } else { next = -1; }

        if (next ==-1){
            next = findNextIndex(scube->SLcs, start, c);
	        if(next == -1){
	            tmp = (scube->Sdims)[(scube->dim)-1];
	            (scube->Sdims)[(scube->dim)-1] = 1;
	            TmpLC = interpNextCandidateSliceLC(&next, start, N, N-1, scube->w, 
                    ((scube->Ssize)/(scube->w))/(scube->w), scube->Sdims, 
                    scube->Ssize, scube->Sdata, scube->points_trees, pPtr);
	        
                (scube->Sdims)[(scube->dim)-1] = tmp;

                if(TmpLC != NULL ){
		            LC = EX_NormalizePoly(TmpLC);
		            EX_FreeOnePoly(TmpLC);
		            (scube->SLcs)[next] = LC;
		            (scube->doneBfr)=next;
	            } else { next = -1; }
	        } else {
	            LC = (scube->SLcs)[next];
	        }
        }

        start=next;
        if (start == -1) {
            regPolyQueue = EX_LinkedQueue_Init();
            toCheckQueue = EX_LinkedQueue_Init();
            EX_LinkedQueue_Enqeue(toCheckQueue, EX_CopyOnePoly(init_f1));
            EX_LinkedQueue_Enqeue(toCheckQueue, EX_CopyOnePoly(init_f2));
        
            regQueue = EX_RegularizeList_1(regPolyQueue, toCheckQueue, taskpair->ts, pPtr);
       
            while(! EX_LinkedQueue_IsEmpty(regQueue)){
	            listpair = (RegularListPair *) EX_LinkedQueue_Deqeue(regQueue);
                bool1 = zeroPolyp((listpair->polyList)[0]);
                bool2 = zeroPolyp((listpair->polyList)[1]);
	            if (bool1==1){
	                if (bool2==1) {
	                    EX_LinkedQueue_Enqeue(resQueue, EX_RegularPair_Init(CreateZeroPoly(), listpair->ts));
	                } else{
                        EX_LinkedQueue_Enqeue(resQueue, EX_RegularPair_Init(EX_CopyOnePoly(f2), listpair->ts));
	                }
	            } else {
	                if (bool2==1) {
                        EX_LinkedQueue_Enqeue(resQueue, EX_RegularPair_Init(EX_CopyOnePoly(f1), listpair->ts)); 
	                } else{
	                    EX_LinkedQueue_Enqeue(resQueue, EX_RegularPair_Init(EX_CopyOnePoly(f2), listpair->ts));
	                }
	            }
                EX_RegularListPair_List_Free(listpair);
            }

            EX_LinkedQueue_Free(regQueue, EX_RegularListPair_Free);
            EX_LinkedQueue_Free(regPolyQueue, EX_Poly_Free);
            EX_LinkedQueue_Free(toCheckQueue, EX_Poly_Free);
            EX_TaskPair_Free((void *)taskpair);
            continue;
        }

        regularQueue = isInvertible_zeroDim(LC, taskpair->ts, pPtr);

        while(! EX_LinkedQueue_IsEmpty(regularQueue)){
            regpair = (RegularPair *) EX_LinkedQueue_Deqeue(regularQueue);
	        if(zeroPolyp(regpair->poly)==1){
	            EX_LinkedQueue_Enqeue(taskQueue, EX_TaskPair_Init(start, regpair->ts));
	        }else{
	            startbackup=start;
                if((scube->SPolys)[start] == NULL){
                    poly = interpIthSlice(start, N, N-1, scube->w, ((scube->Ssize)/scube->w), 
                        scube->Sdims, scube->Ssize, scube->Sdata,  scube->points_trees, pPtr);

                    (scube->SPolys)[start] = poly;
                } else {
                    poly = (scube->SPolys)[start];
                }

                taskQueue2=EX_LinkedQueue_Init();
	            taskinx=0; 
                EX_LinkedQueue_Enqeue(taskQueue2, EX_TaskPair_Init(taskinx, EX_CopyOneTriSet(regpair->ts)));
                start2=startbackup;

                while(!EX_LinkedQueue_IsEmpty(taskQueue2)) {
			        tmp = (scube->Sdims)[(scube->dim)-1];
			        (scube->Sdims)[(scube->dim)-1] = 1;
			        TmpLC2 = interpNextCandidateSliceLC(&next2, start2, N, N-1, scube->w, 
                        ((scube->Ssize)/(scube->w))/(scube->w), scube->Sdims, scube->Ssize, 
                        scube->Sdata, scube->points_trees, pPtr);

			        (scube->Sdims)[(scube->dim)-1] = tmp;

			        if(TmpLC2 != NULL ){
			            LC2 = EX_NormalizePoly(TmpLC2);
			            EX_FreeOnePoly(TmpLC2);
			        } else{ next2 = -1; } 

                    start2=next2;
                    if(start2==-1){
                        while(! EX_LinkedQueue_IsEmpty(taskQueue2) ) {
                            taskpair2 = (TaskPair *) EX_LinkedQueue_Deqeue(taskQueue2);
                            taskinx--;
                            EX_LinkedQueue_Enqeue(resQueue, EX_RegularPair_Init(EX_CopyOnePoly(poly), EX_CopyOneTriSet(taskpair2->ts)));
                            EX_TaskPair_Free((void *)taskpair2);
			            } 
                    } else { 
                        taskQueue3=EX_LinkedQueue_Init();
                        while(! EX_LinkedQueue_IsEmpty(taskQueue2) ){
                            taskpair2 = (TaskPair *) EX_LinkedQueue_Deqeue(taskQueue2);
                            taskinx--;
                            queue2 = isInvertible_zeroDim(LC2, taskpair2->ts, pPtr);
                            while(! EX_LinkedQueue_IsEmpty(queue2)){
                                regpair2 = (RegularPair *) EX_LinkedQueue_Deqeue(queue2);
                                EX_LinkedQueue_Enqeue(taskQueue3, EX_TaskPair_Init(++taskinx, EX_CopyOneTriSet(regpair2->ts)));
                                EX_RegularPair_List_Free((void *)regpair2);
				            }
                            EX_TaskPair_Free((void *)taskpair2);
                            EX_LinkedQueue_Free(queue2, EX_RegularPair_Free);
			            }
                        EX_LinkedQueue_Free(taskQueue2, EX_TaskPair_Free);
                        taskQueue2=taskQueue3;
			        }
	            }
                EX_LinkedQueue_Free(taskQueue2, EX_TaskPair_Free);
	        }
	        EX_RegularPair_List_Free((void *)regpair);
        }
        EX_LinkedQueue_Free(regularQueue, EX_RegularPair_Free);
        EX_TaskPair_Free((void *)taskpair);
    }
  
    EX_LinkedQueue_Free(taskQueue, EX_TaskPair_Free);
    EX_FreeOnePoly(init_f1);
    EX_FreeOnePoly(init_f2);
    return resQueue;
}

LinkedQueue * EX_RegularGcd_Wrapped(preFFTRep *f1, preFFTRep *f2, TriSet *ts,
    sfixn M, MONTP_OPT2_AS_GENE *pPtr) 
{
    int invertibility;
    LinkedQueue *resQueue;
    SCUBE *scube;
    sfixn N, M1, M2;
    TriSet *newts;
    preFFTRep *res;
    
    // does not handle univariate case.
    assert(M>1);
    M1 = N(f1);
    M2 = N(f2);
    assert(M1 == M2);
    M = M1;
    N = N(ts);
    assert(N >= M-1);

    invertibility = MonicizeTriSet_1(N, ts, pPtr);
    if (invertibility==-1) { Interrupted=1; return NULL; }

    scube = EX_SubResultantChain(f1, f2, M, pPtr);  
    res = EX_ResultantFromChain(scube, pPtr);
    if (zeroPolyp(res)){
        newts = EX_getLowerTriSet(M-1, ts);
        resQueue = EX_RegularGcd(f1, f2, newts, scube, pPtr);
        EX_freeTriSet(newts);
        EX_FreeOnePoly(res);
    }else{
        resQueue = EX_LinkedQueue_Init();
        EX_LinkedQueue_Enqeue(resQueue, EX_RegularPair_Init(res, NULL));
        resQueue->count = 0;
    }
    EX_SCUBE_Free(scube);
    return resQueue;
}

//////////////////////////////  END OF FILE ////////////////////////////////////
