#pragma once

#include <gmpxx.h>
#include <vector>
#include "types.h"
#include <thrust/device_vector.h>

using UnivariateMPZPolynomial = std::vector<mpz_class>;
using BivariateMPZPolynomial = std::vector<sfixn>;

// The following information is used to determine how each coefficient in the univariate polynomial P
// is decomposed as itself a univariate polynomial Q, to convert P from a univariate polynomial to a
// bivariate polynmoial.
struct BivariateBase {
    // The number of bits used to represent each coefficient in the univariate polynomial.
    sfixn N;

    // The number of limbs used to represent the univariate coefficient. This is the partial
    // degree of the bivariate polynomial with respect to x.
    sfixn K;

    // The bit-width of each limb in the univariate coefficient. This should be less than a machine
    // word. Note that this may be different from the size of a limb in the GMP library.
    sfixn M;
};

struct TwoConvolutionResult {
    thrust::device_vector<sfixn> cyclic_convolution;
    thrust::device_vector<sfixn> negacyclic_convolution;
};

sfixn find_largest_bit_width_of_coefficients(const UnivariateMPZPolynomial&, const UnivariateMPZPolynomial&);

BivariateMPZPolynomial convert_to_modular_bivariate(const UnivariateMPZPolynomial&, const BivariateBase&, sfixn prime);

void scale_x_argument_dev(thrust::device_vector<sfixn>&, sfixn size, sfixn theta, sfixn prime);

void reconstruct_mpz_with_crt(mpz_t zp, const sfixn* a, const sfixn* b, const sfixn* c, sfixn size, const BivariateBase& base, sfixn limb_bits);

TwoConvolutionResult two_convolution_2d_dev(const thrust::device_vector<sfixn>& A, const thrust::device_vector<sfixn>& B, const BivariateBase&, sfixn prime);

UnivariateMPZPolynomial two_convolution_poly_mul(const UnivariateMPZPolynomial& a, const UnivariateMPZPolynomial& b);

namespace TwoConvolutionConstants {
    // See two_convolution_constants_check.cpp for static checks on these constants.
    // It would have been nice to have these constants in the source file two_convolution_poly_mul.cu
    // since we're leaking the implementation details here, but NVCC doesn't support constexpr
    // functions very well, so we need to put the checks in a separate source file.

    // TODO: write checks for these
    static constexpr sfixn prime1 = 962592769; // The first prime for CRT
    static constexpr sfixn prime2 = 950009857; // The second prime for CRT
    static constexpr sfixn prime3 = 940572673; // The third prime for CRT

    static constexpr longfixnum P1_P2 = 914472618826924033LL;
    static constexpr longfixnum HALF_P1_P2 = 457236309413462016LL;
    static constexpr longfixnum N_HALF_P1_P2 = -457236309413462016LL;
    static constexpr longfixnum P1_U1 = 457236236737707957LL;
    static constexpr longfixnum P2_U2 = -457236236737707956LL;

    static constexpr longfixnum P2_P3 = 893553310574837761LL;
    static constexpr longfixnum P3_P1 = 905388453748801537LL;
    static constexpr sfixn U23 = -412536414;
    static constexpr sfixn U31 = 316662352;
    static constexpr sfixn U12 = 89582607;

    static constexpr __int128 P1_P2_P3 = (__int128) P1_P2 * prime3; // prime1 * prime2 * prime3
    static constexpr __int128 HALF_P1_P2_P3 = P1_P2_P3 >> 1; // prime1 * prime2 * prime3 / 2
    static constexpr __int128 N_HALF_P1_P2_P3 = -HALF_P1_P2_P3; // -prime1 * prime2 * prime3 / 2

    // below: old

    // The two small machine-word primes used for CRT.
    /*
    static constexpr sfixn prime1 {3'221'225'473};
    static constexpr sfixn prime2 {2'013'265'921};
    
    // Pre-computed operations on the two primes used in CRT reconstruction.
    static constexpr longfixnum prime1_prime2 {TwoConvolutionConstants::prime1 * TwoConvolutionConstants::prime2};
    static constexpr longfixnum half_prime1_prime2 {prime1_prime2 >> 1};
    static constexpr longfixnum neg_half_prime1_prime2 = {-half_prime1_prime2};

    // Pre-computed constants for Montgomery modular multiplication.
    constexpr longfixnum montgomery_inverse(longfixnum odd_prime, sfixn montgomery_power);
    constexpr longfixnum mod_inverse(longfixnum x, longfixnum mod);
    constexpr longfixnum to_montgomery(longfixnum x, sfixn montgomery_power, longfixnum mod);

    static constexpr sfixn prime1_montgomery_power {bit_width(prime1) + 1};
    static constexpr sfixn u2_r1_sft {to_montgomery(mod_inverse(prime2, prime1), prime1_montgomery_power, prime1)};
    static constexpr sfixn inverse_prime1 {montgomery_inverse(prime1, montgomery_power)};
    */
    
    // Pre-computed BivariateBases used to convert a univariate polynomial to a modular bivariate one.;
    static constexpr std::array<BivariateBase, 432> base_table {{
        {2, 2, 1},
        {4, 2, 2},
        {6, 2, 3},
        {8, 2, 4},
        {10, 2, 5},
        {12, 2, 6},
        {14, 2, 7},
        {16, 2, 8},
        {18, 2, 9},
        {20, 2, 10},
        {22, 2, 11},
        {24, 2, 12},
        {26, 2, 13},
        {28, 2, 14},
        {30, 2, 15},
        {32, 2, 16},
        {34, 2, 17},
        {36, 2, 18},
        {38, 2, 19},
        {40, 2, 20},
        {42, 2, 21},
        {44, 2, 22},
        {46, 2, 23},
        {48, 2, 24},
        {50, 2, 25},
        {52, 2, 26},
        {54, 2, 27},
        {56, 2, 28},
        {58, 2, 29},
        {60, 2, 30},
        {62, 2, 31},
        {64, 2, 32},
        {66, 2, 33},
        {68, 2, 34},
        {70, 2, 35},
        {72, 2, 36},
        {74, 2, 37},
        {76, 2, 38},
        {78, 2, 39},
        {80, 2, 40},
        {82, 2, 41},
        {84, 2, 42},
        {86, 2, 43},
        {88, 2, 44},
        {90, 2, 45},
        {92, 2, 46},
        {94, 2, 47},
        {96, 2, 48},
        {98, 2, 49},
        {100, 2, 50},
        {102, 2, 51},
        {104, 2, 52},
        {106, 2, 53},
        {108, 2, 54},
        {110, 2, 55},
        {112, 2, 56},
        {114, 2, 57},
        {116, 4, 29},
        {120, 4, 30},
        {124, 4, 31},
        {128, 4, 32},
        {132, 4, 33},
        {136, 4, 34},
        {140, 4, 35},
        {144, 4, 36},
        {148, 4, 37},
        {152, 4, 38},
        {156, 4, 39},
        {160, 4, 40},
        {164, 4, 41},
        {168, 4, 42},
        {172, 4, 43},
        {176, 4, 44},
        {180, 4, 45},
        {184, 4, 46},
        {188, 4, 47},
        {192, 4, 48},
        {196, 4, 49},
        {200, 4, 50},
        {204, 4, 51},
        {208, 4, 52},
        {212, 4, 53},
        {216, 4, 54},
        {220, 4, 55},
        {224, 4, 56},
        {232, 8, 29},
        {240, 8, 30},
        {248, 8, 31},
        {256, 8, 32},
        {264, 8, 33},
        {272, 8, 34},
        {280, 8, 35},
        {288, 8, 36},
        {296, 8, 37},
        {304, 8, 38},
        {312, 8, 39},
        {320, 8, 40},
        {328, 8, 41},
        {336, 8, 42},
        {344, 8, 43},
        {352, 8, 44},
        {360, 8, 45},
        {368, 8, 46},
        {376, 8, 47},
        {384, 8, 48},
        {392, 8, 49},
        {400, 8, 50},
        {408, 8, 51},
        {416, 8, 52},
        {424, 8, 53},
        {432, 8, 54},
        {440, 8, 55},
        {448, 16, 28},
        {464, 16, 29},
        {480, 16, 30},
        {496, 16, 31},
        {512, 16, 32},
        {528, 16, 33},
        {544, 16, 34},
        {560, 16, 35},
        {576, 16, 36},
        {592, 16, 37},
        {608, 16, 38},
        {624, 16, 39},
        {640, 16, 40},
        {656, 16, 41},
        {672, 16, 42},
        {688, 16, 43},
        {704, 16, 44},
        {720, 16, 45},
        {736, 16, 46},
        {752, 16, 47},
        {768, 16, 48},
        {784, 16, 49},
        {800, 16, 50},
        {816, 16, 51},
        {832, 16, 52},
        {848, 16, 53},
        {864, 16, 54},
        {896, 32, 28},
        {928, 32, 29},
        {960, 32, 30},
        {992, 32, 31},
        {1024, 32, 32},
        {1056, 32, 33},
        {1088, 32, 34},
        {1120, 32, 35},
        {1152, 32, 36},
        {1184, 32, 37},
        {1216, 32, 38},
        {1248, 32, 39},
        {1280, 32, 40},
        {1312, 32, 41},
        {1344, 32, 42},
        {1376, 32, 43},
        {1408, 32, 44},
        {1440, 32, 45},
        {1472, 32, 46},
        {1504, 32, 47},
        {1536, 32, 48},
        {1568, 32, 49},
        {1600, 32, 50},
        {1632, 32, 51},
        {1664, 32, 52},
        {1696, 32, 53},
        {1728, 64, 27},
        {1792, 64, 28},
        {1856, 64, 29},
        {1920, 64, 30},
        {1984, 64, 31},
        {2048, 64, 32},
        {2112, 64, 33},
        {2176, 64, 34},
        {2240, 64, 35},
        {2304, 64, 36},
        {2368, 64, 37},
        {2432, 64, 38},
        {2496, 64, 39},
        {2560, 64, 40},
        {2624, 64, 41},
        {2688, 64, 42},
        {2752, 64, 43},
        {2816, 64, 44},
        {2880, 64, 45},
        {2944, 64, 46},
        {3008, 64, 47},
        {3072, 64, 48},
        {3136, 64, 49},
        {3200, 64, 50},
        {3264, 64, 51},
        {3328, 64, 52},
        {3456, 128, 27},
        {3584, 128, 28},
        {3712, 128, 29},
        {3840, 128, 30},
        {3968, 128, 31},
        {4096, 128, 32},
        {4224, 128, 33},
        {4352, 128, 34},
        {4480, 128, 35},
        {4608, 128, 36},
        {4736, 128, 37},
        {4864, 128, 38},
        {4992, 128, 39},
        {5120, 128, 40},
        {5248, 128, 41},
        {5376, 128, 42},
        {5504, 128, 43},
        {5632, 128, 44},
        {5760, 128, 45},
        {5888, 128, 46},
        {6016, 128, 47},
        {6144, 128, 48},
        {6272, 128, 49},
        {6400, 128, 50},
        {6528, 128, 51},
        {6656, 256, 26},
        {6912, 256, 27},
        {7168, 256, 28},
        {7424, 256, 29},
        {7680, 256, 30},
        {7936, 256, 31},
        {8192, 256, 32},
        {8448, 256, 33},
        {8704, 256, 34},
        {8960, 256, 35},
        {9216, 256, 36},
        {9472, 256, 37},
        {9728, 256, 38},
        {9984, 256, 39},
        {10240, 256, 40},
        {10496, 256, 41},
        {10752, 256, 42},
        {11008, 256, 43},
        {11264, 256, 44},
        {11520, 256, 45},
        {11776, 256, 46},
        {12032, 256, 47},
        {12288, 256, 48},
        {12544, 256, 49},
        {12800, 256, 50},
        {13312, 512, 26},
        {13824, 512, 27},
        {14336, 512, 28},
        {14848, 512, 29},
        {15360, 512, 30},
        {15872, 512, 31},
        {16384, 512, 32},
        {16896, 512, 33},
        {17408, 512, 34},
        {17920, 512, 35},
        {18432, 512, 36},
        {18944, 512, 37},
        {19456, 512, 38},
        {19968, 512, 39},
        {20480, 512, 40},
        {20992, 512, 41},
        {21504, 512, 42},
        {22016, 512, 43},
        {22528, 512, 44},
        {23040, 512, 45},
        {23552, 512, 46},
        {24064, 512, 47},
        {24576, 512, 48},
        {25088, 512, 49},
        {25600, 1024, 25},
        {26624, 1024, 26},
        {27648, 1024, 27},
        {28672, 1024, 28},
        {29696, 1024, 29},
        {30720, 1024, 30},
        {31744, 1024, 31},
        {32768, 1024, 32},
        {33792, 1024, 33},
        {34816, 1024, 34},
        {35840, 1024, 35},
        {36864, 1024, 36},
        {37888, 1024, 37},
        {38912, 1024, 38},
        {39936, 1024, 39},
        {40960, 1024, 40},
        {41984, 1024, 41},
        {43008, 1024, 42},
        {44032, 1024, 43},
        {45056, 1024, 44},
        {46080, 1024, 45},
        {47104, 1024, 46},
        {48128, 1024, 47},
        {49152, 1024, 48},
        {51200, 2048, 25},
        {53248, 2048, 26},
        {55296, 2048, 27},
        {57344, 2048, 28},
        {59392, 2048, 29},
        {61440, 2048, 30},
        {63488, 2048, 31},
        {65536, 2048, 32},
        {67584, 2048, 33},
        {69632, 2048, 34},
        {71680, 2048, 35},
        {73728, 2048, 36},
        {75776, 2048, 37},
        {77824, 2048, 38},
        {79872, 2048, 39},
        {81920, 2048, 40},
        {83968, 2048, 41},
        {86016, 2048, 42},
        {88064, 2048, 43},
        {90112, 2048, 44},
        {92160, 2048, 45},
        {94208, 2048, 46},
        {96256, 2048, 47},
        {98304, 4096, 24},
        {102400, 4096, 25},
        {106496, 4096, 26},
        {110592, 4096, 27},
        {114688, 4096, 28},
        {118784, 4096, 29},
        {122880, 4096, 30},
        {126976, 4096, 31},
        {131072, 4096, 32},
        {135168, 4096, 33},
        {139264, 4096, 34},
        {143360, 4096, 35},
        {147456, 4096, 36},
        {151552, 4096, 37},
        {155648, 4096, 38},
        {159744, 4096, 39},
        {163840, 4096, 40},
        {167936, 4096, 41},
        {172032, 4096, 42},
        {176128, 4096, 43},
        {180224, 4096, 44},
        {184320, 4096, 45},
        {188416, 4096, 46},
        {196608, 8192, 24},
        {204800, 8192, 25},
        {212992, 8192, 26},
        {221184, 8192, 27},
        {229376, 8192, 28},
        {237568, 8192, 29},
        {245760, 8192, 30},
        {253952, 8192, 31},
        {262144, 8192, 32},
        {270336, 8192, 33},
        {278528, 8192, 34},
        {286720, 8192, 35},
        {294912, 8192, 36},
        {303104, 8192, 37},
        {311296, 8192, 38},
        {319488, 8192, 39},
        {327680, 8192, 40},
        {335872, 8192, 41},
        {344064, 8192, 42},
        {352256, 8192, 43},
        {360448, 8192, 44},
        {368640, 8192, 45},
        {376832, 16384, 23},
        {393216, 16384, 24},
        {409600, 16384, 25},
        {425984, 16384, 26},
        {442368, 16384, 27},
        {458752, 16384, 28},
        {475136, 16384, 29},
        {491520, 16384, 30},
        {507904, 16384, 31},
        {524288, 16384, 32},
        {540672, 16384, 33},
        {557056, 16384, 34},
        {573440, 16384, 35},
        {589824, 16384, 36},
        {606208, 16384, 37},
        {622592, 16384, 38},
        {638976, 16384, 39},
        {655360, 16384, 40},
        {671744, 16384, 41},
        {688128, 16384, 42},
        {704512, 16384, 43},
        {720896, 16384, 44},
        {753664, 32768, 23},
        {786432, 32768, 24},
        {819200, 32768, 25},
        {851968, 32768, 26},
        {884736, 32768, 27},
        {917504, 32768, 28},
        {950272, 32768, 29},
        {983040, 32768, 30},
        {1015808, 32768, 31},
        {1048576, 32768, 32},
        {1081344, 32768, 33},
        {1114112, 32768, 34},
        {1146880, 32768, 35},
        {1179648, 32768, 36},
        {1212416, 32768, 37},
        {1245184, 32768, 38},
        {1277952, 32768, 39},
        {1310720, 32768, 40},
        {1343488, 32768, 41},
        {1376256, 32768, 42},
        {1409024, 32768, 43},
        {1441792, 65536, 22},
        {1507328, 65536, 23},
        {1572864, 65536, 24},
        {1638400, 65536, 25},
        {1703936, 65536, 26},
        {1769472, 65536, 27},
        {1835008, 65536, 28},
        {1900544, 65536, 29},
        {1966080, 65536, 30},
        {2031616, 65536, 31},
        {2097152, 65536, 32},
        {2162688, 65536, 33},
        {2228224, 65536, 34},
        {2293760, 65536, 35},
        {2359296, 65536, 36},
        {2424832, 65536, 37},
        {2490368, 65536, 38},
        {2555904, 65536, 39},
        {2621440, 65536, 40},
        {2686976, 65536, 41},
        {2752512, 65536, 42},
        {2883584, 131072, 22},
        {3014656, 131072, 23},
        {3145728, 131072, 24},
        {3276800, 131072, 25},
        {3407872, 131072, 26},
        {3538944, 131072, 27},
        {3670016, 131072, 28},
        {3801088, 131072, 29},
        {3932160, 131072, 30},
        {4063232, 131072, 31},
        {4194304, 131072, 32},
    }};
};